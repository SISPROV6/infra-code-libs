trigger:
  branches:
    exclude:
    - main
    - next
    - test
  paths:
    exclude:
    - deploy/*

pool:
  vmImage: ubuntu-latest

variables:
  nodeVersion: '20.x'

jobs:
  - job: 'Build_e_testes'
    steps:
      # Step 1: Define as variáveis que serão usadas no restante do flow
      - script: |
          PROJECT=$(jq -r '.project' deploy/release-info.json)
          VERSION=$(jq -r '.version' deploy/release-info.json)
          NOTES=$(jq -r '.notes' deploy/release-info.json)
          TAG=$(jq -r '.tag' deploy/release-info.json)
          package_version=$(jq -r ".version" package.json)
          echo "##vso[task.setvariable variable=PackageVersion]$package_version"
          echo "##vso[task.setvariable variable=ProjectName]$PROJECT"
          echo "##vso[task.setvariable variable=ProjectVersion]$VERSION"
          echo "##vso[task.setvariable variable=PublishNotes]$NOTES"
          echo "##vso[task.setvariable variable=ProjectTag]$TAG"
        displayName: 'Define variáveis com base no arquivo de release'

      # Step 2: Teste as variáveis
      - script: |
          echo "Package Version: $(PackageVersion)"
          echo "Project Name: $(ProjectName)"
          echo "Project Version: $(ProjectVersion)"
          echo "Publish Notes: $(PublishNotes)"
          echo "Project Tag: $(ProjectTag)"
        displayName: 'Mostrar informações de release'

      # Instalar o Node.js
      - task: UseNode@1
        inputs:
          version: $(nodeVersion)
        displayName: 'Instalar o Node.js'

      # Instalar dependências gerais
      - script: |
          npm install -g @angular/cli
          npm ci
        displayName: 'Instalar dependências gerais'

      # Build da biblioteca
      - script: |
          if [ "$(ProjectName)" == "ngx-sp-auth" ]; then
            cd projects/ngx-sp-auth
            npm ci
            cd ../../
            npm run build:auth:prod
          elif [ "$(ProjectName)" == "ngx-sp-infra" ]; then
            npm run build:infra:prod
          fi
        displayName: 'Build da biblioteca'
      
      # Executa testes com cobertura
      - script: |
          ng test $(ProjectName) --watch=false --code-coverage --browsers=ChromeHeadless
        displayName: 'Executa testes com cobertura'
